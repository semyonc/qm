<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BadCharRef" xml:space="preserve">
    <value>Bad character ref constant &amp;#{0}{1};</value>
  </data>
  <data name="ContextItemNotDefined" xml:space="preserve">
    <value>The context item cannot be defined</value>
  </data>
  <data name="ExpectedAtomicValue" xml:space="preserve">
    <value>Expected atomic value</value>
  </data>
  <data name="ExpectedBlockStart" xml:space="preserve">
    <value>Expected {{ after {0} {1}</value>
  </data>
  <data name="ExpectedNCName" xml:space="preserve">
    <value>Expected NCName after *:</value>
  </data>
  <data name="ExpectedVariablePrefix" xml:space="preserve">
    <value>Expected prefix $ after {0}</value>
  </data>
  <data name="ExpectingCharAfterQName" xml:space="preserve">
    <value>Expecting {0} after QName</value>
  </data>
  <data name="InvalidPITarget" xml:space="preserve">
    <value>The target xml is invalid for processing instruction</value>
  </data>
  <data name="UnexpectedChar" xml:space="preserve">
    <value>Unexpected char {0}</value>
  </data>
  <data name="UnexpectedEOF" xml:space="preserve">
    <value>Unexpected end of file</value>
  </data>
  <data name="XPST0008" xml:space="preserve">
    <value>Qname {0} is not defined</value>
  </data>
  <data name="XPST0004" xml:space="preserve">
    <value>Expected type {0}</value>
  </data>
  <data name="XPST0081" xml:space="preserve">
    <value>The prefix '{0}' cannot be expanded into a namespace URI by using the statically known namespaces</value>
  </data>
  <data name="Sch_EnumFinished" xml:space="preserve">
    <value>Enumeration finished</value>
  </data>
  <data name="Sch_EnumNotStarted" xml:space="preserve">
    <value>Enumeration not started</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File {0} is not found in current path</value>
  </data>
  <data name="MoreThanOneItem" xml:space="preserve">
    <value>More than one item in sequence in atomic expression</value>
  </data>
  <data name="XPDY0002" xml:space="preserve">
    <value>The context item cannot be defined</value>
  </data>
  <data name="XPTY0019" xml:space="preserve">
    <value>The result of a step in path expression must not be an atomic value {0}</value>
  </data>
  <data name="XPTY0004" xml:space="preserve">
    <value>Dynamic type {0} of a value does not match a required type {1}</value>
  </data>
  <data name="XPST0017" xml:space="preserve">
    <value>The function '{0}'/{1} was not found in namespace '{2}'</value>
  </data>
  <data name="XQST0033" xml:space="preserve">
    <value>The module contains multiple bindings for the same namespace prefix {0}.</value>
  </data>
  <data name="XQST0049" xml:space="preserve">
    <value>The variable {0} is already defined in module</value>
  </data>
  <data name="XQST0066" xml:space="preserve">
    <value>The module contains more than one default element/type namespace declaration, or more than one default function namespace declaration.</value>
  </data>
  <data name="XQST0034" xml:space="preserve">
    <value>The function '{0}' in namespace '{1}' has already been declared with the same number of arguments</value>
  </data>
  <data name="XQST0045" xml:space="preserve">
    <value>The function '{0}' cannot be declared in the namespace '{1}'</value>
  </data>
  <data name="ExpectedModuleDecl" xml:space="preserve">
    <value>Expected module declaration</value>
  </data>
  <data name="XQST0032" xml:space="preserve">
    <value>The module prolog contains more than one base URI declaration</value>
  </data>
  <data name="XQST0038" xml:space="preserve">
    <value>The module prolog contains more than one default collation declaration, or the value specified by a default collation declaration is not present in statically known collations</value>
  </data>
  <data name="XQST0065" xml:space="preserve">
    <value>The module prolog contains more than one ordering mode declaration</value>
  </data>
  <data name="XQST0067" xml:space="preserve">
    <value>The module prolog contains more than one construction declaration</value>
  </data>
  <data name="XQST0068" xml:space="preserve">
    <value>The module prolog contains more than one boundary-space declaration</value>
  </data>
  <data name="XQST0069" xml:space="preserve">
    <value>The module  prolog contains more than one empty order declaration</value>
  </data>
  <data name="FORG0003" xml:space="preserve">
    <value>Function 'zero-or-one' was called with a sequence containing more than one item</value>
  </data>
  <data name="FORG0004" xml:space="preserve">
    <value>Function 'one-or-more' was called with a sequence containing no items</value>
  </data>
  <data name="FORG0005" xml:space="preserve">
    <value>Function 'exactly-one' was called with a sequence containing zero or more than one item</value>
  </data>
  <data name="InvalidRegularExpressionFlags" xml:space="preserve">
    <value>Invalid regular expression flags {0}</value>
  </data>
  <data name="UnsupportedNormalizationForm" xml:space="preserve">
    <value>Unsupported normalization form {0}</value>
  </data>
  <data name="FODC0004" xml:space="preserve">
    <value>Invalid argument '{0}' to fn:collection</value>
  </data>
  <data name="FOCA0002" xml:space="preserve">
    <value>Invalid lexical value {0}</value>
  </data>
  <data name="InvalidFormat" xml:space="preserve">
    <value>Input string {0} has invalid format for type {1}</value>
  </data>
</root>