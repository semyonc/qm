<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentIsNotArray" xml:space="preserve">
    <value>Input argument is not indexed collection</value>
  </data>
  <data name="BadOrderByItem" xml:space="preserve">
    <value>ORDER BY item {0} must be the number of a SELECT-list expression</value>
  </data>
  <data name="ColumnAmbiguoslyDefined" xml:space="preserve">
    <value>Column {0} ambiguously defined</value>
  </data>
  <data name="ColumnDataTypeRequred" xml:space="preserve">
    <value>For fixed length text schema column data type declaration is requred</value>
  </data>
  <data name="DataReaderNotOpen" xml:space="preserve">
    <value>DataReader is not open</value>
  </data>
  <data name="DefaultDataSourceNotDefined" xml:space="preserve">
    <value>The default datasource is undefined</value>
  </data>
  <data name="EscapeCharToLong" xml:space="preserve">
    <value>Escape char must be a string one character length</value>
  </data>
  <data name="ExpectedArgument" xml:space="preserve">
    <value>Expected argument in function {0}</value>
  </data>
  <data name="ExpectedWidthInSchemaIni" xml:space="preserve">
    <value>{0} - Expecting column width for fixed length text schema</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>File {0} is not found in current path</value>
  </data>
  <data name="GroupFunctionNotAllowed" xml:space="preserve">
    <value>Group function not allowed in where clause</value>
  </data>
  <data name="IllegalJoin" xml:space="preserve">
    <value>Qualified join is illegal for dynamic table</value>
  </data>
  <data name="ImpossiblePrefix" xml:space="preserve">
    <value>The prefix {0} is impossible for name {0}</value>
  </data>
  <data name="InconsistentDatatypes" xml:space="preserve">
    <value>Inconsistent datatypes expected {0} got {1}</value>
  </data>
  <data name="InconsistentNestedTypes" xml:space="preserve">
    <value>Inconsistent nested types</value>
  </data>
  <data name="IncorrectSubqueries" xml:space="preserve">
    <value>Corresponed subqueris must have equal number result columns with same datatypes</value>
  </data>
  <data name="InvalidAxisToken" xml:space="preserve">
    <value>The token {0} is invalid axis</value>
  </data>
  <data name="InvalidIdentifier" xml:space="preserve">
    <value>{0}: Invalid identifier</value>
  </data>
  <data name="InvalidIdentifierFormat" xml:space="preserve">
    <value>For {0} datasources identifier must be a "{1}"</value>
  </data>
  <data name="InvalidOptionForXmlAttribute" xml:space="preserve">
    <value>The option NIL ON NULL and NULL ON NULL  is invalid for attribute {0}</value>
  </data>
  <data name="InvalidOrdinalInXMLAgg" xml:space="preserve">
    <value>Only column names allowed in XMLAgg ORDER BY clause</value>
  </data>
  <data name="InvalidTableAlias" xml:space="preserve">
    <value>Invalid table alias name {0}</value>
  </data>
  <data name="InvalidTextFileFormat" xml:space="preserve">
    <value>Invalid text file format: no delimiter after double-quote. LineNo = {0}. LinePos = {1}.</value>
  </data>
  <data name="MissingFromClause" xml:space="preserve">
    <value>Missing FROM clause</value>
  </data>
  <data name="NoDataFound" xml:space="preserve">
    <value>No data found</value>
  </data>
  <data name="NodeNotExists" xml:space="preserve">
    <value>Node "{0}" is not exist</value>
  </data>
  <data name="NodeTextInvalidArgument" xml:space="preserve">
    <value>Argument of function $text must be a XmlNode</value>
  </data>
  <data name="NotAGroupByExpr" xml:space="preserve">
    <value>Not a group by expression "{0}"</value>
  </data>
  <data name="NotComparableValues" xml:space="preserve">
    <value>Values is not comparable</value>
  </data>
  <data name="NotEnoughValues" xml:space="preserve">
    <value>Not enough values in predicate</value>
  </data>
  <data name="NotSingleGroupFunc" xml:space="preserve">
    <value>Not a single-group group function "{0}"</value>
  </data>
  <data name="NotStructuredObject" xml:space="preserve">
    <value>Can't dereference {0}: value {1} is not structured object</value>
  </data>
  <data name="ParameterMustBeAliased" xml:space="preserve">
    <value>Parameter {0} of function {1} must be aliased</value>
  </data>
  <data name="RowRecycled" xml:space="preserve">
    <value>The row state is 'recycled'</value>
  </data>
  <data name="SingleRowSubquery" xml:space="preserve">
    <value>Single row subquery return more than one row</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="SQLX_Config" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\SQLX.Config.xml;System.Byte[], mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="SyntaxError" xml:space="preserve">
    <value>Syntax error: {0}</value>
  </data>
  <data name="TableDoesNotExists" xml:space="preserve">
    <value>Table or view {0} does not exists</value>
  </data>
  <data name="TooManyArguments" xml:space="preserve">
    <value>Too many arguments in function {0}</value>
  </data>
  <data name="TooManyValues" xml:space="preserve">
    <value>Too many values</value>
  </data>
  <data name="UndefinedProperty" xml:space="preserve">
    <value>Property {0} is undefined for object type {1}</value>
  </data>
  <data name="UnexpectedRownum" xml:space="preserve">
    <value>$rownum() allowed only in select expression</value>
  </data>
  <data name="UnexpectedTextFileEOF" xml:space="preserve">
    <value>Unexpected end-of-file in double-quoted literal. LineNo = {0}. LinePos = {1}.</value>
  </data>
  <data name="UnexpectedTextFileEOL" xml:space="preserve">
    <value>Unexpected end-of-line in double-quoted literal. LineNo = {0}. LinePos = {1}.</value>
  </data>
  <data name="UnknownDataSource" xml:space="preserve">
    <value>Datasource name {0} is unknown or not exists</value>
  </data>
  <data name="ValueConvertException" xml:space="preserve">
    <value>Value "{0}" can not be converted to type {1}. LineNo = {2}. LinePos = {3}.</value>
  </data>
  <data name="InvalidFunctionArgument" xml:space="preserve">
    <value>Invalid argument of function {0}</value>
  </data>
  <data name="DuplicateContextItem" xml:space="preserve">
    <value>XMLQUERY expression contains duplicate context item</value>
  </data>
  <data name="DyntableEmpty" xml:space="preserve">
    <value>Dynamic table "{0}" is empty set.</value>
  </data>
  <data name="NoOneFileWasFound" xml:space="preserve">
    <value>{0} - No one file was found.</value>
  </data>
  <data name="XQueryEngineNotImplemented" xml:space="preserve">
    <value>Can't execute XQuery request because XQuery engine is not implemented.</value>
  </data>
</root>