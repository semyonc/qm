//        Copyright (c) 2010, Semyon A. Chertkov (semyonc@gmail.com)
//        All rights reserved.
//
//        This program is free software: you can redistribute it and/or modify
//        it under the terms of the GNU General Public License as published by
//        the Free Software Foundation, either version 3 of the License, or
//        any later version.

using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Threading;

using DataEngine;
using DataEngine.CoreServices;
using DataEngine.Export;


namespace XQueryConsole
{
    /// <summary>
    /// Interaction logic for CreateTableDialog.xaml
    /// </summary>
    public partial class CreateTableDialog : Window, INotifyPropertyChanged 
    {
        private readonly string sTableUnspec = "-- Not all data specified.";


        private Connection dataSource;
        private string tableName;
        private bool autoGenerateDDL;
        private string cachedDDL;
        private DispatcherTimer dispatcherTimer;

        public CreateTableDialog()
        {
            InitializeComponent();
            CommandText = sTableUnspec;
            MainWindow main = (MainWindow)Application.Current.MainWindow;
            DataContext = main.DatasourceController.Container.connections;
            BatchMove = new BatchMove();
            AutoGenerateDDL = true;
            dispatcherTimer = new DispatcherTimer();
            dispatcherTimer.Interval = new TimeSpan(0, 0, 0, 0, 300);
            dispatcherTimer.Tick += new EventHandler(dispatcherTimer_Tick);
        }

        private void dispatcherTimer_Tick(object sender, EventArgs e)
        {
            dispatcherTimer.Stop();
            if (DataSource == null)
                return;
            BatchMove.ProviderInvariantName = DataSource.InvariantName;
            BatchMove.ConnectionString = DataSource.ConnectionString;
            if (AutoGenerateDDL)
            {
                Cursor = Cursors.Wait;
                try
                {
                    cachedDDL = BatchMove.GetCreateTableDDL();
                    CreateCommandText();           
                    if (BatchMove.HasUnknownDatatype)
                        MessageBox.Show(this, "Table definition has datatypes not supported by selected provider", "Information",
                            MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(this, ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                Cursor = null;
            }
        }

        private void CreateCommandText()
        {
            if (!String.IsNullOrEmpty(TableName) && DataSource != null)
            {
                BatchMove.TableName = TableName;
                DataProviderHelper helper = new DataProviderHelper(DataSource.InvariantName, DataSource.ConnectionString);
                CommandText = String.Format("CREATE TABLE {0} (\n{1}\n)",
                    helper.FormatIdentifier(Util.SplitName(TableName)), cachedDDL);
            }
            else
                CommandText = sTableUnspec;
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion

        public Connection DataSource
        {
            get
            {
                return dataSource;
            }
            set
            {
                dataSource = value;
                dispatcherTimer.Start();
                OnPropertyChanged("DataSource");
                OnPropertyChanged("IsOkButtonEnabled");
            }
        }

        public string TableName 
        {
            get
            {
                return tableName;
            }
            set
            {
                tableName = value;
                CreateCommandText();
                OnPropertyChanged("TableName");
                OnPropertyChanged("IsOkButtonEnabled");
            }
        }

        public string CommandText 
        {
            get
            {
                return textEditor.Document.Text;
            }
            set
            {
                textEditor.Document.Text = value;
                OnPropertyChanged("CommandText");
            }
        }

        public bool AutoGenerateDDL 
        {
            get
            {
                return autoGenerateDDL;
            }
            set
            {
                if (value != autoGenerateDDL)
                {
                    autoGenerateDDL = value;
                    textEditor.IsReadOnly = autoGenerateDDL;
                    OnPropertyChanged("AutoGenerateDDL");
                }
            }
        }

        public bool IsOkButtonEnabled
        {
            get
            {
                return DataSource != null && !String.IsNullOrEmpty(TableName);
            }
        }

        public BatchMove BatchMove { get; private set; }

        private void okButton_Click(object sender, RoutedEventArgs e)
        {
            if (DataSource == null)
                return;
            DataProviderHelper helper = new DataProviderHelper(DataSource.InvariantName, DataSource.ConnectionString);
            if (BatchMove.IsTableExists())
            {
                if (MessageBox.Show(String.Format("The table {0} is already exists on database server.\r\n" +
                    "Do you want to drop existing table ?", TableName), "Confirmation", MessageBoxButton.OKCancel, MessageBoxImage.Information)  == MessageBoxResult.OK &&
                    MessageBox.Show("All table data will be lost !\r\nContinue ?", "Warning", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes)
                    BatchMove.DropTable();
            }
            DbConnection conn = DataProviderHelper.CreateDbConnection(DataSource.InvariantName);
            conn.ConnectionString = DataSource.ConnectionString;
            DbCommand command = conn.CreateCommand();
            command.CommandText = CommandText;
            conn.Open();
            try
            {
                command.ExecuteNonQuery();
                DialogResult = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show(this, ex.Message, "SQL Error",
                    MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }
            conn.Close();
            if (!autoGenerateDDL)
            {
                MainWindow main = (MainWindow)Application.Current.MainWindow;
                DatabaseDictionary dict = main.DatasourceController.Dictionary;
                TableType tableType = dict.GetTableType(DataSource.Prefix,
                    Util.SplitName(BatchMove.TableName));
                BatchMove.SetFieldsFromTableType(tableType);
            }
        }
    }
}
